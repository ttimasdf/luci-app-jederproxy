#!/usr/bin/utpl
{%
    const uci = require("uci");
    const fs = require("fs");

    function iterate_file(filename, cb) {
        let fd = fs.open(filename, "r");
        if (!fd) {
            warn(`Unable to open '${filename}': ${fs.error()}\n`);
            return;
        }

        let line = null, count = 0;
        while (!!(line = trim(fd.read("line")))) {
            if (ord(line) == 35)  // skip lines which start with '#'
                continue;

            cb(line);

            count++;
        }
        fd.close();
        return count;
    }

    const cursor = uci.cursor();
    cursor.load("jederproxy");
    const config = cursor.get_all("jederproxy");
    const general = config[filter(keys(config), k => config[k][".type"] == "general")[0]];
    const tp_spec_src_fw = uniq(map(filter(keys(config), k => config[k][".type"] == "lan_hosts" && config[k].bypassed == "0"), k => config[k].macaddr) || []);
    const tp_spec_src_bp = uniq(map(filter(keys(config), k => config[k][".type"] == "lan_hosts" && config[k].bypassed == "1"), k => config[k].macaddr) || []);
    const uids_direct = uniq(general.uids_direct || []);
    const gids_direct = uniq(general.gids_direct || []);
    const wan_bp_ips = general.wan_bp_ips || [];
    const wan_fw_ips = general.wan_fw_ips || [];
    iterate_file(general.wan_bp_list || "/dev/null", line => push(wan_bp_ips, line));
    iterate_file(general.wan_fw_list || "/dev/null", line => push(wan_fw_ips, line));
    push(wan_bp_ips, split(general.fast_dns, ":")[0]);
    push(wan_fw_ips, split(general.secure_dns, ":")[0]);
%}
    set tp_spec_src_bp {
        type ether_addr
        size 65536
{% if (length(tp_spec_src_bp) > 0): %}
        elements = { {{ join(", ", tp_spec_src_bp) }} }
{% endif %}
    }

    set tp_spec_src_fw {
        type ether_addr
        size 65536
{% if (length(tp_spec_src_fw) > 0): %}
        elements = { {{ join(", ", tp_spec_src_fw) }} }
{% endif %}
    }

    set tp_spec_dst_sp {
        type ipv4_addr
        size 65536
        flags interval
        elements = {
            0.0.0.0/8,
            10.0.0.0/8,
            100.64.0.0/10,
            127.0.0.0/8,
            169.254.0.0/16,
            172.16.0.0/12,
            192.0.0.0/24,
            192.0.2.0/24,
            192.88.99.0/24,
            192.168.0.0/16,
            198.18.0.0/15,
            198.51.100.0/24,
            203.0.113.0/24,
            224.0.0.0/4,
            233.252.0.0/24,
            240.0.0.0/4
        }
        auto-merge
    }

    set tp_spec_dst_bp {
        type ipv4_addr
        size 65536
        flags interval
        elements = { {{ join(", ", wan_bp_ips)}} }
        auto-merge
    }

    set tp_spec_dst_fw {
        type ipv4_addr
        size 65536
        flags interval
        elements = { {{ join(", ", wan_fw_ips)}} }
        auto-merge
    }

    chain xray_rules {
{% if (length(uids_direct) > 0): %}
        meta skuid { {{ join(", ", uids_direct) }} } return comment "ignore traffic from processes owned by specific UIDs"
{% endif %}
{% if (length(gids_direct) > 0): %}
        meta skgid { {{ join(", ", gids_direct) }} } return comment "ignore traffic from processes owned by specific GIDs"
{% endif %}

        mark {{ sprintf("0x%08x", general.mark) }} counter return comment "ignore traffic marked by xray outbound"
        counter meta mark set ct mark comment "connection-mark -> packet-mark"
        mark 0x2333 counter return comment "ignore established connections"

        ip daddr @tp_spec_dst_sp return comment "ignore traffic sent to reserved (SPecial) IP address/networks"
        ether saddr @tp_spec_src_bp return comment "ignore traffic (ByPass) from specific sources (by macaddr)"
        ether saddr @tp_spec_src_fw jump xray_proxy comment "enforce proxy (ForWard) from specific sources (by macaddr)"
        ip daddr @tp_spec_dst_fw jump xray_proxy comment "enforce proxy (ForWard) to specific IP address/networks"
        ip daddr @tp_spec_dst_bp return comment "ignore traffic (ByPass) sent to specific IP address/networks"

        jump xray_proxy
    }

    chain xray_proxy {
        tcp flags & (fin|syn|rst|ack) == syn counter meta mark set 0x2333 comment "mark the first packet of TCP connections"
        ip protocol udp ct state new counter meta mark set 0x2333 comment "mark the first packet of UDP connections"
        counter ct mark set mark comment "packet-mark -> connection-mark"
    }

    chain xray_prerouting {
        type filter hook prerouting priority filter; policy accept;

        iifname "{{ general.lan_ifaces }}" ip protocol {tcp, udp} fib saddr type != local fib daddr type != local counter jump xray_rules comment "proxy TCP/UDP traffic passing through this router (other->other)"

        meta l4proto tcp meta mark 0x2333 tproxy ip to 127.0.0.1:{{ general.tproxy_port_tcp }} counter accept comment "hand over marked TCP packets to xray"
        meta l4proto udp meta mark 0x2333 tproxy ip to 127.0.0.1:{{ general.tproxy_port_udp }} counter accept comment "hand over marked UDP packets to xray"
    }

    chain xray_output {
        type route hook output priority filter; policy accept;
        ip protocol {tcp, udp} fib saddr type local fib daddr type != local counter jump xray_rules comment "Proxy TCP/UDP traffic from router itself"
    }
