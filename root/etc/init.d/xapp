#!/bin/sh /etc/rc.common

START=90
STOP=15
USE_PROCD=1
NAME=jederproxy

. $IPKG_INSTROOT/lib/functions/jederproxy.sh

uci_get_by_type() {
    local ret=$(uci get ${NAME}.@$1[0].$2 2> /dev/null)
    echo ${ret:=$3}
}

log_procd_set_param() {
    local type="$1"
    shift
    log "Using procd_set_param $type" "$@"
}

start_xray() {
    log "Starting Xray from $1"
    procd_open_instance
    procd_set_param respawn 1 1 0
    procd_set_param command $1
    procd_append_param command run
    procd_append_param command -confdir
    procd_append_param command /var/etc/jederproxy

    local rlimit_nofile
    local rlimit_data
    rlimit_nofile="$(uci_get_by_type general rlimit_nofile)"
    rlimit_data="$(uci_get_by_type general rlimit_data)"

    if [ ! -z "${rlimit_nofile}" ] ; then
        log "set limit nofile=${rlimit_nofile}"
        procd_set_param limits "nofile=${rlimit_nofile}"
    fi
    if [ ! -z "${rlimit_data}" ] ; then
        log "set limit data=${rlimit_data}"
        procd_set_param limits "data=${rlimit_data}"
    fi

    procd_set_param env XRAY_LOCATION_ASSET=/usr/share/jederproxy
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param file /etc/config/jederproxy
    procd_set_param pidfile /var/run/jederproxy.pid
    procd_close_instance
}

gen_config_file() {
    rm -f /var/etc/jederproxy/*
    log "Generating Xray configuration files..."
    impl_gen_config_file
    local custom_config=$(uci_get_by_type general custom_config)
    [ ! "${#custom_config}" == "0" ] && echo ${custom_config} > /var/etc/jederproxy/11-jederproxy-custom.json
    local custom_config_dir=$(uci_get_by_type general custom_config_dir)
    [ -n "$custom_config_dir" -a -n "$(ls -A $custom_config_dir)" ] && cp "$custom_config_dir"/*.json /var/etc/jederproxy/
}

setup_dnsmasq() {
    local dns_port=$(uci_get_by_type general dns_port)
    local dns_count=$(uci_get_by_type general dns_count 0)

    echo "# Generated dnsmasq configurations by luci-app-jederproxy" > /tmp/dnsmasq.d/jederproxy.conf
    echo "strict-order" >> /tmp/dnsmasq.d/jederproxy.conf
    echo "server=/#/127.0.0.1#${dns_port}" >> /tmp/dnsmasq.d/jederproxy.conf
    local cur_port
    for cur_port in $(seq ${dns_port} $(expr ${dns_port} + ${dns_count})); do
        echo "server=127.0.0.1#${cur_port}" >> /tmp/dnsmasq.d/jederproxy.conf
    done

    log $(cat /tmp/dnsmasq.d/jederproxy.conf)
    /etc/init.d/dnsmasq restart > /dev/null 2>&1
}

flush_dnsmasq() {
    [ -f "/tmp/dnsmasq.d/jederproxy.conf" ] && rm /tmp/dnsmasq.d/jederproxy.conf
    /etc/init.d/dnsmasq restart > /dev/null 2>&1
}

create_when_enable() {
    [ "$(uci_get_by_type general transparent_proxy_enable)" == "1" ] || return 0
    log "Setting dnsmasq and firewall for transparent proxy..."
    [ "$(uci_get_by_type general dnsmasq_takeover_enable)" == "1" ] && setup_dnsmasq
    setup_firewall
}

flush_when_disable() {
    log "Resetting dnsmasq and firewall configurations..."
    [ "$(uci_get_by_type general dnsmasq_takeover_enable)" == "1" ] && flush_dnsmasq
    flush_firewall
}

start_service() {
    config_load $NAME
    mkdir -p /var/run /var/etc/jederproxy
    local xray_bin=$(uci_get_by_type general xray_bin)
    command -v ${xray_bin} > /dev/null 2>&1 || return 1
    gen_config_file
    start_xray ${xray_bin}
    create_when_enable || flush_when_disable
}

stop_service() {
    flush_when_disable
}

reload_service() {
    stop
    start
}

service_triggers() {
    procd_add_reload_trigger "xray"
}
